1.  What do you understand by Java virtual machine?
Ans :   Java Virtual Machine is a virtual machine that enables the computer to run the Java program.
        JVM acts like a run-time engine which calls the main method present in the Java code.
        JVM is the specification which must be implemented in the computer system.
        The Java code is compiled by JVM to be a Bytecode which is machine independent and
        close to the native code.

2.  What do you understand by JRE ?
Ans :   JRE stands for Java Runtime Environment.
        It is the implementation of JVM.
        The Java Runtime Environment is a set of software tools which are used for developing
        Java applications.
        It is used to provide the runtime environment.
        It is the implementation of JVM. It physically exists.
        It contains a set of libraries + other files that JVM uses at runtime.

3.      What do you understand by JDK ?
Ans :   JDK is an acronym for Java Development Kit.
        It is a software development environment which is used to develop Java applications and
        applets. It physically exists. It contains JRE + development tools.
        JDK is an implementation of any one of the below given Java Platforms released by
        Oracle Corporation:

        a. Standard Edition Java Platform
        b. Enterprise Edition Java Platform
        c. Micro Edition Java Platform

4.      How many types of memory areas are allocated by JVM?
Ans :   Five types
        a) Class(Method) Area
        -  Class Area stores per-class structures such as the runtime constant pool,
           field, method data, and the code for methods.
        b) Heap
        -  It is the runtime data area in which the memory is allocated to the objects
        c) Stack
        -  Java Stack stores frames. It holds local variables and partial results,
           and plays a part in method invocation and return. Each thread has a private JVM stack,
           created at the same time as the thread. A new frame is created each time a method is
           invoked. A frame is destroyed when its method invocation completes.
        d) Program Counter Register
        -  PC (program counter) register contains the address of the Java virtual machine
           instruction currently being executed.
        e) Native Method Stack
        -  It contains all the native methods used in the application.

5.      What is  JIT compiler ?
Ans :   Just-In-Time(JIT) compiler: It is used to improve the performance. JIT compiles parts of
        the bytecode that have similar functionality at the same time, and hence reduces the amount
        of time needed for compilation. Here the term “compiler” refers to a translator from the
        instruction set of a Java virtual machine (JVM) to the instruction set of a specific CPU.

6.      What is the Platform ?
Ans :   A platform is the hardware or software environment in which a piece of software is executed.
        There are two types of platforms, software-based and hardware-based.
        Java provides the software-based platform.

7.      What is main difference between Java platform and other platforms ?
Ans :   There are the following differences between the Java platform and other platforms.
        a) Java is the software-based platform whereas other platforms may be the hardware platforms
            or software-based platforms.
        b) Java is executed on the top of other hardware platforms whereas other platforms can only
            have the hardware components.

8.      What gives Java its 'write once and run anywhere' nature?
Ans :   The bytecode. Java compiler converts the Java programs into the class file (Byte Code)
        which is the intermediate language between source code and machine code.
        This bytecode is not platform specific and can be executed on any computer.

9.      What is classloader?
Ans :   Classloader is a subsystem of JVM which is used to load class files.
        Whenever we run the java program, it is loaded first by the classloader.

10.     How many types of classloader are there ?
Ans :   There are three built-in classloaders in Java.
        a) Bootstrap
        b) Extension
        c) System/Application

        Bootstrap ClassLoader: This is the first classloader which is the superclass of Extension
        classloader. It loads the rt.jar file which contains all class files of Java Standard
        Edition like java.lang package classes, java.net package classes, java.util package classes,
        java.io package classes, java.sql package classes, etc.

        Extension ClassLoader: This is the child classloader of Bootstrap and parent classloader of
        System classloader. It loads the jar files located inside $JAVA_HOME/jre/lib/ext directory.

        System/Application ClassLoader: This is the child classloader of Extension classloader.
        It loads the class files from the classpath. By default, the classpath is set to the current
        directory. You can change the classpath using "-cp" or "-classpath" switch.
        It is also known as Application classloader.

11.     Is Empty .java file name a valid source file name ?
Ans :   Yes, Java allows to save our java file by .java only, we need to compile it by
        javac .java and run by java classname.

        //save by .java only
        class A{
            public static void main(String args[]){
                System.out.println("Hello java");
            }
        }
        //compile by javac .java
        //run by     java A
        compile it by javac .java
        run it by java A

12.     Is delete, next, main, exit or null keyword in java?
Ans :   No.

13.     If I don't provide any arguments on the command line, then what will the value stored in
        the String array passed into the main() method, empty or NULL?
Ans :   It is empty, but not null.

14.     What if I write static public void instead of public static void?
Ans :   The program compiles and runs correctly because the order of specifiers doesn't matter
        in Java.

15.     What is the default value of the local variables?
Ans :   The local variables are not initialized to any default value, neither primitives nor
        object references.

16.     What are the various access specifiers in Java?
Ans :   In Java, access specifiers are the keywords which are used to define the access scope of
        the method, class, or a variable.

17.     How many types of access specifiers are there in Java ?
Ans :   There are 4 types of access specifiers - Public, Protected, Default, Private


