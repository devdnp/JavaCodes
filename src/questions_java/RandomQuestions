1.  What do you understand by Java virtual machine?
Ans :   Java Virtual Machine is a virtual machine that enables the computer to run the Java program.
        JVM acts like a run-time engine which calls the main method present in the Java code.
        JVM is the specification which must be implemented in the computer system.
        The Java code is compiled by JVM to be a Bytecode which is machine independent and
        close to the native code.

2.  What do you understand by JRE ?
Ans :   JRE stands for Java Runtime Environment.
        It is the implementation of JVM.
        The Java Runtime Environment is a set of software tools which are used for developing
        Java applications.
        It is used to provide the runtime environment.
        It is the implementation of JVM. It physically exists.
        It contains a set of libraries + other files that JVM uses at runtime.

3.      What do you understand by JDK ?
Ans :   JDK is an acronym for Java Development Kit.
        It is a software development environment which is used to develop Java applications and
        applets. It physically exists. It contains JRE + development tools.
        JDK is an implementation of any one of the below given Java Platforms released by
        Oracle Corporation:

        a. Standard Edition Java Platform
        b. Enterprise Edition Java Platform
        c. Micro Edition Java Platform

4.      How many types of memory areas are allocated by JVM?
Ans :   Five types
        a) Class(Method) Area
        -  Class Area stores per-class structures such as the runtime constant pool,
           field, method data, and the code for methods.
        b) Heap
        -  It is the runtime data area in which the memory is allocated to the objects
        c) Stack
        -  Java Stack stores frames. It holds local variables and partial results,
           and plays a part in method invocation and return. Each thread has a private JVM stack,
           created at the same time as the thread. A new frame is created each time a method is
           invoked. A frame is destroyed when its method invocation completes.
        d) Program Counter Register
        -  PC (program counter) register contains the address of the Java virtual machine
           instruction currently being executed.
        e) Native Method Stack
        -  It contains all the native methods used in the application.

5.      What is  JIT compiler ?
Ans :   Just-In-Time(JIT) compiler: It is used to improve the performance. JIT compiles parts of
        the bytecode that have similar functionality at the same time, and hence reduces the amount
        of time needed for compilation. Here the term “compiler” refers to a translator from the
        instruction set of a Java virtual machine (JVM) to the instruction set of a specific CPU.

6.      What is the Platform ?
Ans :   A platform is the hardware or software environment in which a piece of software is executed.
        There are two types of platforms, software-based and hardware-based.
        Java provides the software-based platform.

7.      What is main difference between Java platform and other platforms ?
Ans :   There are the following differences between the Java platform and other platforms.
        a) Java is the software-based platform whereas other platforms may be the hardware platforms
            or software-based platforms.
        b) Java is executed on the top of other hardware platforms whereas other platforms can only
            have the hardware components.

8.      What gives Java its 'write once and run anywhere' nature?
Ans :   The bytecode. Java compiler converts the Java programs into the class file (Byte Code)
        which is the intermediate language between source code and machine code.
        This bytecode is not platform specific and can be executed on any computer.

9.      What is classloader?
Ans :   Classloader is a subsystem of JVM which is used to load class files.
        Whenever we run the java program, it is loaded first by the classloader.

10.     How many types of classloader are there ?
Ans :   There are three built-in classloaders in Java.
        a) Bootstrap
        b) Extension
        c) System/Application

        Bootstrap ClassLoader: This is the first classloader which is the superclass of Extension
        classloader. It loads the rt.jar file which contains all class files of Java Standard
        Edition like java.lang package classes, java.net package classes, java.util package classes,
        java.io package classes, java.sql package classes, etc.

        Extension ClassLoader: This is the child classloader of Bootstrap and parent classloader of
        System classloader. It loads the jar files located inside $JAVA_HOME/jre/lib/ext directory.

        System/Application ClassLoader: This is the child classloader of Extension classloader.
        It loads the class files from the classpath. By default, the classpath is set to the current
        directory. You can change the classpath using "-cp" or "-classpath" switch.
        It is also known as Application classloader.

11.     Is Empty .java file name a valid source file name ?
Ans :   Yes, Java allows to save our java file by .java only, we need to compile it by
        javac .java and run by java classname.

        //save by .java only
        class A{
            public static void main(String args[]){
                System.out.println("Hello java");
            }
        }
        //compile by javac .java
        //run by     java A
        compile it by javac .java
        run it by java A

12.     Is delete, next, main, exit or null keyword in java?
Ans :   No.

13.     If I don't provide any arguments on the command line, then what will the value stored in
        the String array passed into the main() method, empty or NULL?
Ans :   It is empty, but not null.

14.     What if I write static public void instead of public static void?
Ans :   The program compiles and runs correctly because the order of specifiers doesn't matter
        in Java.

15.     What is the default value of the local variables?
Ans :   The local variables are not initialized to any default value, neither primitives nor
        object references.

16.     What are the various access specifiers in Java?
Ans :   In Java, access specifiers are the keywords which are used to define the access scope of
        the method, class, or a variable.

17.     How many types of access specifiers are there in Java ?
Ans :   There are 4 types of access specifiers - Public, Protected, Default, Private

18.     Whats the definition of each type of access specifiers ?
Ans :   Public - The classes, methods, or variables which are defined as public, can be accessed
                 by any class or method.
        Protected - Protected can be accessed by the class of the same package, or by the sub-class
                    of this class, or within the same class.
        Default - Default are accessible within the package only. By default, all the classes,
                  methods, and variables are of default scope.
        Private - The private class, methods, or variables defined as private can be accessed
                  within the class only.

19.     What is the purpose of static methods and variables?
Ans :   The methods or variables defined as static are shared among all the objects of the class. The static is
        the part of the class and not of the object. The static variables are stored in the class area, and we
        do not need to create the object to access such variables. Therefore, static is used in the case,
        where we need to define variables or methods which are common to all the objects of the class.

        For example, In the class simulating the collection of the students in a college, the name of the
        college is the common attribute to all the students. Therefore, the college name will be defined as
        static.

20.     What are the advantages of Packages in Java?
Ans :   There are various advantages of defining packages in Java.
        Packages avoid the name clashes.
        The Package provides easier access control.
        We can also have the hidden classes that are not visible outside and used by the package.
        It is easier to locate the related classes.

21.     What is an object?
Ans :   The Object is the real-time entity having some state and behavior. In Java, Object is an
        instance of the class having the instance variables as the state of the object and the
        methods as the behavior of the object. The object of a class can be created by using the
        new keyword.

22.     What is object-oriented paradigm?
Ans :   It is a programming paradigm based on objects having data and methods defined in the class
        to which it belongs. Object-oriented paradigm aims to incorporate the advantages of
        modularity and reusability. Objects are the instances of classes which interacts with one
        another to design applications and programs. There are the following features of the
        object-oriented paradigm.
        Points to note -
        - Follows the bottom-up approach in program design.
        - Focus on data with methods to operate upon the object's data
        - Includes the concept like Encapsulation and abstraction which hides the complexities from
            the user and show only functionality.
        - Implements the real-time approach like inheritance, abstraction, etc.
        - The examples of the object-oriented paradigm are C++, Simula, Smalltalk, Python, C#, etc.

23.     What will be the initial value of an object reference which is defined as an instance
        variable?
Ans :   All object references are initialized to null in Java.

24.     What is the difference between an object-oriented programming language and object-based
        programming language?
Ans :   There are the following basic differences between the object-oriented language and
        object-based language.

        a) Object-oriented languages follow all the concepts of OOPs whereas, the object-based
            language doesn't follow all the concepts of OOPs like inheritance and polymorphism.
        b) Object-oriented languages do not have the inbuilt objects whereas Object-based languages
            have the inbuilt objects, for example, JavaScript has window object.
        c) Examples of object-oriented programming are Java, C#, Smalltalk, etc. whereas the
            examples of object-based languages are JavaScript, VBScript, etc.

25.     What is the constructor?
Ans :   The constructor can be defined as the special type of method that is used to initialize the
        state of an object. It is invoked when the class is instantiated, and the memory is
        allocated for the object. Every time, an object is created using the new keyword, the
        default constructor of the class is called. The name of the constructor must be similar to
        the class name. The constructor must not have an explicit return type.

26.     What is the purpose of a default constructor?
Ans :   The purpose of the default constructor is to assign the default value to the objects. The
        java compiler creates a default constructor implicitly if there is no constructor in the
        class.

27.     Can you make a constructor final?
Ans :   No, the constructor can't be final.

28.     Can we overload the constructors?
Ans :   Yes, the constructors can be overloaded by changing the number of arguments accepted by the
        constructor or by changing the data type of the parameters.

29.     What do you understand by copy constructor in Java?
Ans :   There is no copy constructor in java. However, we can copy the values from one object to
        another like copy constructor in C++.
        There are many ways to copy the values of one object into another in java. They are:
        By constructor
        By assigning the values of one object into another
        By clone() method of Object class

30.     What is the static variable?
Ans :   The static variable is used to refer to the common property of all objects (that is not
        unique for each object), e.g., The company name of employees, college name of students,
        etc. Static variable gets memory only once in the class area at the time of class loading.
        Using a static variable makes your program more memory efficient (it saves memory). Static
        variable belongs to the class rather than the object.

31.     What is the static method?
Ans :   A static method belongs to the class rather than the object.
        There is no need to create the object to call the static methods.
        A static method can access and change the value of the static variable.

32.     What are the restrictions that are applied to the Java static methods?
Ans :   Two main restrictions are applied to the static methods.
        a) The static method can not use non-static data member or call the non-static method
            directly.
        b) this and super cannot be used in static context as they are non-static.

33.     Why is the main method static?
Ans :   Because the object is not required to call the static method. If we make the main method
        non-static, JVM will have to create its object first and then call main() method which
        will lead to the extra memory allocation. More Details.

34.     Can we override the static methods?
Ans :   No, we can't override static methods.

35.     What is the static block?
Ans :   Static block is used to initialize the static data member. It is executed before the main
        method, at the time of classloading.

36.     Can we overload the constructors?
Ans :   Yes, the constructors can be overloaded by changing the number of arguments accepted by the
        constructor or by changing the data type of the parameters.

37.     Can you make a constructor final?
Ans :   No, the constructor can't be final.

38.     What is the static variable?
Ans :   The static variable is used to refer to the common property of all objects (that is not
        unique for each object), e.g., The company name of employees, college name of students, etc.
        Static variable gets memory only once in the class area at the time of class loading.
        Using a static variable makes your program more memory efficient (it saves memory).
        Static variable belongs to the class rather than the object.

39.     How can constructor chaining be done using this keyword?
Ans :   Constructor chaining enables us to call one constructor from another constructor of the
        class with respect to the current class object. We can use this keyword to perform
        constructor chaining within the same class. Consider the following example which illustrates
        how can we use this keyword to achieve constructor chaining.

40.     What are the advantages of passing this into a method instead of the current class object
        itself?
Ans :   As we know, that this refers to the current class object, therefore, it must be similar to
        the current class object. However, there can be two main advantages of passing this into a
        method instead of the current class object.
        - this is a final variable. Therefore, this cannot be assigned to any new value whereas the
            current class object might not be final and can be changed.
        - this can be used in the synchronized block.

41.     What is the Inheritance?
Ans :   Inheritance is a mechanism by which one object acquires all the properties and behavior of
        another object of another class. It is used for Code Reusability and Method Overriding. The
        idea behind inheritance in Java is that you can create new classes that are built upon
        existing classes. When you inherit from an existing class, you can reuse methods and fields
        of the parent class. Moreover, you can add new methods and fields in your current class
        also.

42.     What if the static modifier is removed from the signature of the main method?
Ans :   Program compiles. However, at runtime, It throws an error "NoSuchMethodError."

43.     What is IS-A relationship ?
Ans :   Inheritance represents the IS-A relationship which is also known as a parent-child
        relationship.

44.     How many types of inheritance are there in java ?
Ans :   There are five types of inheritance in Java.
        a) Single-level inheritance
        b) Multi-level inheritance
        c) Multiple Inheritance
        d) Hierarchical Inheritance
        e) Hybrid Inheritance
        NOTE : Multiple inheritance is not supported in Java through class.

45.     What are the main uses of the super keyword?
Ans :   There are the following uses of super keyword
        - super can be used to refer to the immediate parent class instance variable.
        - super can be used to invoke the immediate parent class method.
        - super() can be used to invoke immediate parent class constructor.

46.     What is aggregation?
Ans :   Aggregation can be defined as the relationship between two classes where the aggregate
        class contains a reference to the class it owns. Aggregation is best described as a has-a
        relationship. For example, The aggregate class Employee having various fields such as age,
        name, and salary also contains an object of Address class having various fields such as
        Address-Line 1, City, State, and pin-code. In other words, we can say that Employee (class)
        has an object of Address class.

47.     What is composition?
Ans :   Holding the reference of a class within some other class is known as composition. When an
        object contains the other object, if the contained object cannot exist without the existence
        of container object, then it is called composition. In other words, we can say that
        composition is the particular case of aggregation which represents a stronger relationship
        between two objects. Example: A class contains students. A student cannot exist without a
        class. There exists composition between class and students.

48.     What is the difference between aggregation and composition?
Ans :   Aggregation represents the weak relationship whereas composition represents the strong relationship. For
        example, the bike has an indicator (aggregation), but the bike has an engine (composition).

49.     Why does Java not support pointers?
Ans :   The pointer is a variable that refers to the memory address. They are not used in Java
        because they are unsafe(unsecured) and complex to understand.

50.     What is super in java?
Ans :   The super keyword in Java is a reference variable that is used to refer to the immediate
        parent class object. Whenever you create the instance of the subclass, an instance of the
        parent class is created implicitly which is referred by super reference variable. The
        super() is called in the class constructor implicitly by the compiler if there is no super
        or this.

51.     What is object cloning?
Ans :   The object cloning is used to create the exact copy of an object. The clone() method of the
        Object class is used to clone an object. The java.lang.Cloneable interface must be
        implemented by the class whose object clone we want to create. If we don't implement
        Cloneable interface, clone() method generates CloneNotSupportedException.

52.     What is method overloading?
Ans :   Method overloading is the polymorphism technique which allows us to create multiple methods
        with the same name but different signature.

53.     How can achieve method overloading?
Ans :   We can achieve method overloading in two ways.
        a) By Changing the number of arguments
        b) By Changing the data type of arguments
        Method overloading increases the readability of the program. Method overloading is
        performed to figure out the program quickly.

54.     Can this keyword be used to refer static members?
Ans :   Yes, It is possible to use this keyword to refer static members because this is just a
        reference variable which refers to the current class object. However, as we know that, it
        is unnecessary to access static variables through objects, therefore, it is not the best
        practice to use this to refer static members.

55.     How can constructor chaining be done using this keyword?
Ans :   Constructor chaining enables us to call one constructor from another constructor of the
        class with respect to the current class object. We can use this keyword to perform
        constructor chaining within the same class.

56.     What are the advantages of passing this into a method instead of the current class object
        itself?
Ans :   As we know, that this refers to the current class object, therefore, it must be similar to
        the current class object. However, there can be two main advantages of passing this into a method instead of the current class object.
        -   this is a final variable. Therefore, this cannot be assigned to any new value whereas
            the current class object might not be final and can be changed.
        -   this can be used in the synchronized block.

57.     Can you use this() and super() both in a constructor?
Ans :   No, because this() and super() must be the first statement in the class constructor

58.     What is object cloning?
Ans :   The object cloning is used to create the exact copy of an object. The clone() method of the
        Object class is used to clone an object. The java.lang.Cloneable interface must be
        implemented by the class whose object clone we want to create. If we don't implement
        Cloneable interface, clone() method generates CloneNotSupportedException.

59.      Can we overload the methods by making them static?
Ans :   No, We cannot overload the methods by just applying the static keyword to them(number of
        parameters and types are the same).