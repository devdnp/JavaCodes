//76 - 88

Q76. Can we have static methods in an Interface?
Ans: Static methods can't be overridden in any class while any methods in an interface are by
default abstract and are supposed to be implemented in the classes being implementing the
interface. So it makes no sense to have static methods in an interface in Java.

Q77. In a class implementing an interface, can we change the value of any variable defined in
the interface?
Ans: No, we can't change the value of any variable of an interface in the implementing class as all
variables defined in the interface are by default public, static and Final and final variables are like
constants which can't be changed later.

Q78. Is it correct to say that due to garbage collection feature in Java, a java program never goes
out of memory?
Ans: Even though automatic garbage collection is provided by Java, it doesn't ensure that a Java
program will not go out of memory as there is a possibility that creation of Java objects is being
done at a faster pace compared to garbage collection resulting in filling of all the available memory
resources.
So, garbage collection helps in reducing the chances of a program going out of memory but it
doesn't ensure that.

Q79. Can we have any other return type than void for main method?
Ans: No, Java class main method can have only void return type for the program to get successfully
executed.
Nonetheless , if you absolutely must return a value to at the completion of main method , you can
use System.exit(int status).

Q80. I want to re-reach and use an object once it has been garbage collected. How it's possible?
Ans: Once an object has been destroyed by garbage collector, it no longer exists on the heap and it
can't be accessed again. There is no way to reference it again.

Q81. In Java thread programming, which method is a must implementation for all threads?
Ans: Run() is a method of Runnable interface that must be implemented by all threads.

Q82. I want to control database connections in my program and want that only one thread
should be able to make database connection at a time. How can I implement this logic?
Ans: This can be implemented by use of the concept of synchronization. Database related code
can be placed in a method which hs synchronized keyword so that only one thread can access it at
a time.

Q83. How can an exception be thrown manually by a programmer?
Ans: In order to throw an exception in a block of code manually, throw keyword is used. Then this
exception is caught and handled in the catch block.
public void topMethod(){
    try{
        excMethod();
    }catch(ManualException e)
    { }
}
public void excMethod{
    String name=null;
    if(name == null){
        throw (new ManualException("Exception thrown manually ");
    }
}

Q84. I want my class to be developed in such a way that no other class (even derived class) can
create its objects. How can I do so?
Ans: If we declare the constructor of a class as private, it will not be accessible by any other class
and hence, no other class will be able to instantiate it and formation of its object will be limited to
itself only.

Q85. How objects are stored in Java?
Ans: In java, each object when created gets a memory space from a heap. When an object is
destroyed by a garbage collector, the space allocated to it from the heap is re-allocated to the
heap and becomes available for any new objects.

Q86. How can we find the actual size of an object on the heap?
Ans: In java, there is no way to find out the exact size of an object on the heap.

Q87. Which of the following classes will have more memory allocated?
Class A: Three methods, four variables, no object
Class B: Five methods, three variables, no object
Ans: Memory isn't allocated before creation of objects. Since for both classes, there are no
objects created so no memory is allocated on heap for any class.

Q88. What happens if an exception is not handled in a program?
Ans: If an exception is not handled in a program using try catch blocks, program gets aborted and
no statement executes after the statement which caused exception throwing.
