Q67. What will be the output of Round(3.7) and Ceil(3.7)?
Ans: Round(3.7) returns 4 and Ceil(3.7) returns 4.

Q68: Can we use goto in Java to go to a particular line?
Ans: In Java, there is not goto keyword and java doesn't support this feature of going to a
particular labeled line.

Q69. Can a dead thread be started again?
Ans: In java, a thread which is in dead state can't be started again. There is no way to restart a
dead thread.

Q70. Is the following class declaration correct?
Ans:
public abstract final class testClass {
// Class methods and variables
}
Ans: The above class declaration is incorrect as an abstract class can't be declared as Final.

Q71. Is JDK required on each machine to run a Java program?
Ans: JDK is development Kit of Java and is required for development only and to run a Java
program on a machine, JDK isn't required. Only JRE is required.

Q72. What's the difference between comparison done by equals method and == operator?
Ans: In Java, equals() method is used to compare the contents of two string objects and returns
true if the two have same value while == operator compares the references of two string objects.

In the following example, equals() returns true as the two string objects have same values.
However == operator returns false as both string objects are referencing to different objects:

public class equalsTest {
    public static void main(String args[]) {
        String str1 = new String("Hello World");
        String str2 = new String("Hello World");
        if (str1.equals(str2))
        { // this condition is true
            System.out.println("str1 and str2 are equal in terms of values");
        }
        if (str1 == str2) {
            //This condition is true
            System.out.println("Both strings are referencing same object");
        } else
        {
            // This condition is NOT true
            System.out.println("Both strings are referencing different objects");
        }
    }
}


Q73. Is it possible to define a method in Java class but provide it's implementation in the code of
another language like C?
Ans: Yes, we can do this by use of native methods. In case of native method based development,
we define public static methods in our Java class without its implementation and then
implementation is done in another language like C separately.
