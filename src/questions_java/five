Q19. What are the performance implications of Interfaces over abstract classes?
Ans: Interfaces are slower in performance as compared to abstract classes as extra indirections
are required for interfaces. Another key factor for developers to take into consideration is that any
class can extend only one abstract class while a class can implement many interfaces.
Use of interfaces also puts an extra burden on the developers as any time an interface is
implemented in a class; developer is forced to implement each and every method of interface.

Q20. Does Importing a package imports its sub-packages as well in Java?
Ans: In java, when a package is imported, its sub-packages aren't imported and developer needs to
import them separately if required.
For example, if a developer imports a package university.*, all classes in the package named
university are loaded but no classes from the sub-package are loaded. To load the classes from its
sub-package ( say department), developer has to import it explicitly as follows:
Import university.department.*

Q21. Can we declare the main method of our class as private?
Ans: In java, main method must be public static in order to run any application correctly. If main
method is declared as private, developer won't get any compilation error however, it will not get
executed and will give a runtime error.

Q22. How can we pass argument to a function by reference instead of pass by value?
Ans: In java, we can pass argument to a function only by value and not by reference.

Q23. How an object is serialized in java?
Ans: In java, to convert an object into byte stream by serialization, an interface with the name
Serializable is implemented by the class. All objects of a class implementing serializable interface
get serialized and their state is saved in byte stream.

Q24. When we should use serialization?
Ans: Serialization is used when data needs to be transmitted over the network. Using serialization,
object's state is saved and converted into byte stream .The byte stream is transferred over the
network and the object is re-created at destination.

Q25. Is it compulsory for a Try Block to be followed by a Catch Block in Java for Exception
handling?
Ans: Try block needs to be followed by either Catch block or Finally block or both. Any exception
thrown from try block needs to be either caught in the catch block or else any specific tasks to be
performed before code abortion are put in the Finally block.

Q26. Is there any way to skip Finally block of exception even if some exception occurs in the
exception block?
Ans: If an exception is raised in Try block, control passes to catch block if it exists otherwise to
finally block. Finally block is always executed when an exception occurs and the only way to avoid
execution of any statements in Finally block is by aborting the code forcibly by writing following
line of code at the end of try block:
System.exit(0);