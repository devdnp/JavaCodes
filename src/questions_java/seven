Q45. Can we call the constructor of a class more than once for an object?
Ans: Constructor is called automatically when we create an object using new keyword. It's called
only once for an object at the time of object creation and hence, we can't invoke the constructor
again for an object after its creation.

Q46. There are two classes named classA and classB. Both classes are in the same package. Can a
private member of classA can be accessed by an object of classB?
Ans: Private members of a class aren't accessible outside the scope of that class and any other
class even in the same package can't access them.

Q47. Can we have two methods in a class with the same name?
Ans: We can define two methods in a class with the same name but with different number/type of
parameters. Which method is to get invoked will depend upon the parameters passed.
For example in the class below we have two print methods with same name but different
parameters. Depending upon the parameters, appropriate one will be called:
public class methodExample {
    public void print() {
        system.out.println("Print method without parameters.");
    }
    public void print(String name) {
        system.out.println("Print method with parameter");
    }
    public static void main(String args[]) {
        methodExample obj1= new methodExample();
        obj1.print();
        obj1.print("xx");
    }
}

Q48. How can we make copy of a java object?
Ans: We can use the concept of cloning to create copy of an object. Using clone, we create copies
with the actual state of an object.
Clone() is a method of Cloneable interface and hence, Cloneable interface needs to be
implemented for making object copies.

Q49. What's the benefit of using inheritance?
Ans: Key benefit of using inheritance is reusability of code as inheritance enables sub-classes to
reuse the code of its super class. Polymorphism (Extensibility ) is another great benefit which allow
new functionality to be introduced without effecting existing derived classes.

Q50. What’s the default access specifier for variables and methods of a class?
Ans: Default access specifier for variables and method is package protected i.e variables and class
is available to any other class but in the same package,not outside the package.

Q51. Give an example of use of Pointers in Java class.
Ans: There are no pointers in Java. So we can't use concept of pointers in Java.

Q52. How can we restrict inheritance for a class so that no class can be inherited from it?
Ans: If we want a class not to be extended further by any class, we can use the keyword Final with
the class name.
In the following example, Stone class is Final and can't be extend
public Final Class Stone {
// Class methods and Variables
}

Q53. What’s the access scope of Protected Access specifier?
Ans: When a method or a variable is declared with Protected access specifier, it becomes
accessible in the same class,any other class of the same package as well as a sub-class.
                    Access Levels
Modifier       Class   Package     Subclass    World
public          Y       Y           Y           Y
protected       Y       Y           Y           N
no modifier     Y       Y           N           N
private         Y       N           N           N

Q54. What's difference between Stack and Queue?
Ans: Stack and Queue both are used as placeholder for a collection of data. The primary difference
between a stack and a queue is that stack is based on Last in First out (LIFO) principle while a
queue is based on FIFO (First In First Out) principle.

Q55. In java, how we can disallow serialization of variables?
Ans: If we want certain variables of a class not to be serialized, we can use the keyword transient
while declaring them. For example, the variable trans_var below is a transient variable and can't
be serialized:

public class transientExample {
    private transient trans_var;
    // rest of the code
}

Q56. How can we use primitive data types as objects?
Ans: Primitive data types like int can be handled as objects by the use of their respective wrapper
classes. For example, Integer is a wrapper class for primitive data type int. We can apply different
methods to a wrapper class, just like any other object.

Q57. Which types of exceptions are caught at compile time?
Ans: Checked exceptions can be caught at the time of program compilation. Checked exceptions
must be handled by using try catch block in the code in order to successfully compile the code.

Q58. Describe different states of a thread.
Ans: A thread in Java can be in either of the following states:
• Ready: When a thread is created, it's in Ready state.
• Running: A thread currently being executed is in running state.
• Waiting: A thread waiting for another thread to free certain resources is in waiting state.
• Dead: A thread which has gone dead after execution is in dead state.

Q59. Can we use a default constructor of a class even if an explicit constructor is defined?
Ans: Java provides a default no argument constructor if no explicit constructor is defined in a Java
class. But if an explicit constructor has been defined, default constructor can't be invoked and
developer can use only those constructors which are defined in the class.